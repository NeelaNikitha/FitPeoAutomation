package Assignment;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

public class slider {

	public static void main(String[] args) throws InterruptedException {
		WebDriver driver=new ChromeDriver();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		
		driver.get("https://www.fitpeo.com/revenue-calculator");
		driver.manage().window().maximize();
		
		WebElement inputBox = driver.findElement(By.xpath("(//input[@id=':R57alklff9da:'])[1]"));

        // Use Actions class to clear and type
        Actions actions = new Actions(driver);

        // Clear the input box first
        inputBox.clear();

        // Click the input box and send the desired value
        actions.moveToElement(inputBox).click().perform();
        inputBox.sendKeys("560"); // Alternatively, use actions.sendKeys("560").perform();

        // Sync with the slider by triggering the 'input' event
        WebElement slider = driver.findElement(By.xpath("//input[@type='range']")); // Replace with slider's locator
        Actions sliderActions = new Actions(driver);

        // Drag the slider to the corresponding position (optional, if required)
        sliderActions.clickAndHold(slider).moveByOffset(calculateOffset(200, 560), 0).release().perform();

        // Wait for the changes to reflect if necessary
        Thread.sleep(1000);

        // Verify that the input box value and slider are synchronized
        String currentValue = inputBox.getAttribute("value");
        if ("560".equals(currentValue)) {
            System.out.println("Test Passed: Input box and slider synchronized to 560.");
        } else {
            System.out.println("Test Failed: Input box value is " + currentValue);
        }

	}

	private static int calculateOffset(int currentValue, int targetValue) {
        int stepSize = 1; // Slider step value (e.g., 1 per unit, adjust as necessary)
        return (targetValue - currentValue) * stepSize;
    }

}
